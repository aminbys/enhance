--- stats.c	2015-01-09 15:44:32.012498000 +0100
+++ stats_new.c	2015-01-09 15:47:43.114475000 +0100
@@ -355,10 +355,8 @@
     return read_len;
 }
 
-void count_mismatches_per_cycle(stats_t *stats,bam1_t *bam_line)
+void count_mismatches_per_cycle(stats_t *stats,bam1_t *bam_line, int read_len)
 {
-    int read_len = unclipped_length(bam_line);
-    if ( read_len >= stats->nbases ) realloc_buffers(stats,read_len);
     int is_fwd = IS_REVERSE(bam_line) ? 0 : 1;
     int icig,iread=0,icycle=0;
     int iref = bam_line->core.pos - stats->rseq_pos;
@@ -428,7 +426,7 @@
 
                 int idx = is_fwd ? icycle : read_len-icycle-1;
                 if ( idx>stats->max_len )
-                    error("mpc: %d>%d\n",idx,stats->max_len);
+                    error("mpc: %d>%d (%s %d %s)\n",idx,stats->max_len,stats->sam_header->target_name[bam_line->core.tid],bam_line->core.pos+1,bam_get_qname(bam_line));
 
                 idx = idx*stats->nquals + qual;
                 if ( idx>=stats->nquals*stats->nbases )
@@ -645,12 +643,14 @@
     int seq_len = bam_line->core.l_qseq;
     if ( !seq_len ) return;
 
-    if ( seq_len >= stats->nbases )
-        realloc_buffers(stats,seq_len);
-    if ( stats->max_len<seq_len )
-        stats->max_len = seq_len;
+    int read_len = unclipped_length(bam_line);
+
+    if ( read_len >= stats->nbases )
+        realloc_buffers(stats,read_len);
+    if ( stats->max_len<read_len )
+        stats->max_len = read_len;
 
-    stats->read_lengths[seq_len]++;
+    stats->read_lengths[read_len]++;
 
     // Count GC and ACGT per cycle. Note that cycle is approximate, clipping is ignored
     uint8_t base, *seq  = bam_get_seq(bam_line);
@@ -850,7 +850,7 @@
                     stats->gcd[ stats->igcd ].gc = fai_gc_content(stats, stats->gcd_pos, stats->gcd_bin_size);
                 }
 
-                count_mismatches_per_cycle(stats,bam_line);
+                count_mismatches_per_cycle(stats,bam_line,read_len);
             }
             // No reference and first pass, new chromosome or sequence going beyond the end of the gcd bin
             else if ( stats->gcd_pos==-1 || stats->tid != bam_line->core.tid || bam_line->core.pos - stats->gcd_pos > stats->gcd_bin_size )
